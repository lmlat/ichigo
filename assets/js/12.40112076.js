(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{434:function(t,a,s){"use strict";s.r(a);var e=s(3),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"io流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#io流"}},[t._v("#")]),t._v(" IO流")]),t._v(" "),a("h2",{attrs:{id:"io流概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#io流概念"}},[t._v("#")]),t._v(" IO流概念")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("流是指一连串流动的字符,是以先进先出方式发送信息的通道")]),t._v("，即数据在两设备间的传输称为流，流的本质是数据传输，根据数据传输特性将流抽象为各种类，方便更直观的进行数据操作**")])]),t._v(" "),a("h2",{attrs:{id:"java-io流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-io流"}},[t._v("#")]),t._v(" Java IO流")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("Java中把不同的输入/输出源（键盘、文件、网络连接等）抽象表述为“流”（stream），通过流的方式允许Java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收（sink）的有序数据")]),t._v(" "),a("strong",[t._v("Java把所有传统的个流类型（类或抽象类）都放在java.io包中，用以实现输入/输出功能")])])]),t._v(" "),a("h2",{attrs:{id:"file-文件操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#file-文件操作"}},[t._v("#")]),t._v(" File 文件操作")]),t._v(" "),a("p",[t._v("作用：使用File类来进行文件相关操作")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),t._v(" file "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),t._v(" f "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C:\\\\users\\\\home"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("常用方法：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法名")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("用法")]),t._v(" "),a("th",[t._v("返回值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("createNewFile")]),t._v(" "),a("td",[t._v("创建一个空文件")]),t._v(" "),a("td",[t._v("File.createNewFile();")]),t._v(" "),a("td",[t._v("若文件成功创建，返回true；否则返回false；需要抛出IOException异常")])]),t._v(" "),a("tr",[a("td",[t._v("createTempFile")]),t._v(" "),a("td",[t._v("创建临时文件")]),t._v(" "),a("td",[t._v('File.createTempFile("abc",".txt");')]),t._v(" "),a("td",[t._v("返回文件对象。需要抛出IOException异常")])]),t._v(" "),a("tr",[a("td",[t._v("listRoots")]),t._v(" "),a("td",[t._v("获取文件根目录列表")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("返回File对象数组")])]),t._v(" "),a("tr",[a("td",[t._v("mkdir")]),t._v(" "),a("td",[t._v("创建一个文件夹目录")]),t._v(" "),a("td",[t._v("只有当C:\\users目录存在时,f.mkdir()才会创建home目录")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("mkdirs")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("f.mkdirs()将创建users目录(若它不存在C盘中),它将在C:\\users目录下创建主目录")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("delete")]),t._v(" "),a("td",[t._v("删除文件/目录")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("文件/目录被删除,返回true; 否则返回false")])]),t._v(" "),a("tr",[a("td",[t._v("deleteOnExit")]),t._v(" "),a("td",[t._v("JVM终止时删除文件/目录")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("文件/目录被删除,返回true; 否则返回false")])]),t._v(" "),a("tr",[a("td",[t._v("renameTo")]),t._v(" "),a("td",[t._v("重命名文件")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("若文件重命名成功,返回true;否则返回false。")])]),t._v(" "),a("tr",[a("td",[t._v("length")]),t._v(" "),a("td",[t._v("获取文件的大小")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("listFiles")]),t._v(" "),a("td",[t._v("获取目录中的所有文件和目录")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("返回File数组")])]),t._v(" "),a("tr",[a("td",[t._v("list")]),t._v(" "),a("td",[t._v("获取目录中的所有文件和目录")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("返回String数组")])])])]),t._v(" "),a("h2",{attrs:{id:"filefilter-文件过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#filefilter-文件过滤器"}},[t._v("#")]),t._v(" FileFilter 文件过滤器")]),t._v(" "),a("p",[t._v("FileFilter函数式接口包含一个accept方法，它将File作为参数，若需要列出文件，则返回true；若返回false，则不会列出文件。")]),t._v(" "),a("p",[t._v("FileFilter接口源代码：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@FunctionalInterface")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileFilter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * Tests whether or not the specified abstract pathname should be\n     * included in a pathname list.\n     *\n     * @param  pathname  The abstract pathname to be tested\n     * @return  <code>true</code> if and only if <code>pathname</code>\n     *          should be included\n     */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),t._v(" pathname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"inputstream-输入流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inputstream-输入流"}},[t._v("#")]),t._v(" InputStream 输入流")]),t._v(" "),a("p",[t._v("InputStream 类是所有输入流的超类，即它是抽象基本组件。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InputStream")]),t._v(" \n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileInputStream")]),t._v(" 文件输入流\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteArrayInputStream")]),t._v(" 字节输入\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PipedInputStream")]),t._v(" 管道输入流\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FilterInputStream")]),t._v(" 过滤器输入流\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedInputStream")]),t._v(" 缓冲输入流\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PushbackInputStream")]),t._v(" 推回输入流\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DataInputStream")]),t._v(" 数据输入流\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectInputStream")]),t._v(" 对象输入流\n")])])]),a("p",[t._v("超类 InputStream 包含从输入流读取数据的基本方法，所有具体类都支持。如下表所示：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("read()")]),t._v(" "),a("td",[t._v("读取一个字节并将读取的字节作为int返回。当到达输入流的结尾时，返回-1。")])]),t._v(" "),a("tr",[a("td",[t._v("read(byte[] buffer)")]),t._v(" "),a("td",[t._v("读取最大值直到指定缓冲区的长度。它返回在缓冲区中读取的字节数。当到达输入流的结尾，返回-1。")])]),t._v(" "),a("tr",[a("td",[t._v("read(byte[] buffer,int offset,int len)")]),t._v(" "),a("td",[t._v("读取最大值到指定长度字节。数据从offset开始写入缓冲区。它返回读取的字节数或-1，当到达输入流的结束。")])]),t._v(" "),a("tr",[a("td",[t._v("close()")]),t._v(" "),a("td",[t._v("关闭输入流")])]),t._v(" "),a("tr",[a("td",[t._v("available()")]),t._v(" "),a("td",[t._v("返回"),a("strong",[t._v("可以从此输入流读取但不阻塞的估计字节数")])])])])]),t._v(" "),a("h2",{attrs:{id:"outputstream-流出流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#outputstream-流出流"}},[t._v("#")]),t._v(" OutputStream 流出流")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("flush()")]),t._v(" "),a("td",[t._v("方法用于将任何缓冲的字节刷新到数据宿")])]),t._v(" "),a("tr",[a("td",[t._v("close()")]),t._v(" "),a("td",[t._v("关闭输入流")])]),t._v(" "),a("tr",[a("td",[t._v("write")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("write(byte[] b)")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("write(byte[] b, int offset, int len)")]),t._v(" "),a("td")])])]),t._v(" "),a("h2",{attrs:{id:"文件流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件流"}},[t._v("#")]),t._v(" 文件流")]),t._v(" "),a("h3",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),a("h2",{attrs:{id:"缓冲流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓冲流"}},[t._v("#")]),t._v(" 缓冲流")]),t._v(" "),a("h4",{attrs:{id:"bufferedinputstream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bufferedinputstream"}},[t._v("#")]),t._v(" BufferedInputStream")]),t._v(" "),a("p",[t._v("BufferedInputStream通过缓冲数据向输入流添加功能。"),a("strong",[t._v("它维护一个内部缓冲区以存储从底层输入流读取的字节")]),t._v("。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedInputStream")]),t._v(" bis "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedInputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileInputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("例：文件读取")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("\n")])])]),a("h2",{attrs:{id:"推回流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#推回流"}},[t._v("#")]),t._v(" 推回流")]),t._v(" "),a("h4",{attrs:{id:"pushbackinputstream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pushbackinputstream"}},[t._v("#")]),t._v(" PushbackInputStream")]),t._v(" "),a("p",[t._v("PushbackInputStream向输入流添加功能，允许我们使用其unread()方法推回读取的字节。")]),t._v(" "),a("h2",{attrs:{id:"二进制流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二进制流"}},[t._v("#")]),t._v(" 二进制流")]),t._v(" "),a("h4",{attrs:{id:"datainputstream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#datainputstream"}},[t._v("#")]),t._v(" DataInputStream")]),t._v(" "),a("p",[t._v("DataInputStream可以从输入流中读取Java基本数据类型值。")]),t._v(" "),a("h4",{attrs:{id:"dataoutputstream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dataoutputstream"}},[t._v("#")]),t._v(" DataOutputStream")]),t._v(" "),a("p",[t._v("DataOutputStream可以写入Java基本数据类型值，通过writeUTF方法写入字符串数据；")]),t._v(" "),a("h2",{attrs:{id:"打印流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#打印流"}},[t._v("#")]),t._v(" 打印流")]),t._v(" "),a("h4",{attrs:{id:"printstream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#printstream"}},[t._v("#")]),t._v(" PrintStream")]),t._v(" "),a("blockquote",[a("p",[t._v("它能以合适的格式打印任何数据类型值或对象。它可以将数据写入输出流不抛出IOException。")]),t._v(" "),a("p",[t._v("若一个方法抛出一个IOException，PrintStream流会设置一个内部标志，并不会抛出该异常。可以通过checkError()方法获取标志值，若方法执行期间发生IOException，则返回true。")]),t._v(" "),a("p",[t._v("PrintStream具有自动刷新功能。我们可以在其构造函数中指定它应该自动刷新写入它的内容。")])]),t._v(" "),a("h2",{attrs:{id:"管道流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管道流"}},[t._v("#")]),t._v(" 管道流")]),t._v(" "),a("p",[t._v("管道流是用来在多个线程之间进行信息传递的Java流。它是基于生产者-消费者模式，其中生产者产生数据并且消费者消费数据。在管道流中，通过PipedOutputStream、PipedInputStream对象表示管道的两端。")]),t._v(" "),a("p",[t._v("连接管道的二种方式：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PipedInputStream")]),t._v(" pis "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PipedInputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PipedOutputStream")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PipedOutputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//pos.connect(pis); 作用一样")]),t._v("\npis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("connnect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PipedInputStream")]),t._v(" pis "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PipedInputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PipedOutputStream")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PipedOutputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("Java的管道输入与输出实际上使用的是一个循环缓冲数来实现的。输入流PipedInputStream从这个循环缓冲数组中读数据，输出流PipedOutputStream往这个循环缓冲数组中写入数据。当这个缓冲数组已满的时候，输出流PipedOutputStream所在的线程将阻塞；当这个缓冲数组为空的时候，输入流PipedInputStream所在的线程将阻塞。")]),t._v(" "),a("p",[t._v("注意点：")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("管道流仅用于多个线程之间传递信息，若用在同一个线程中可能会造成死锁；")]),t._v(" "),a("li",[t._v("管道流的输入输出是成对的，一个输出流只能对应一个输入流，使用构造函数或者connect函数进行连接；")]),t._v(" "),a("li",[t._v("一对管道流包含一个缓冲区，其默认值为1024个字节，若要改变缓冲区大小，可以使用带有参数的构造函数；")]),t._v(" "),a("li",[t._v("管道的读写操作是互相阻塞的，当缓冲区为空时，读操作阻塞；当缓冲区满时，写操作阻塞；")]),t._v(" "),a("li",[t._v("管道依附于线程，因此若线程结束，则虽然管道流对象还在，仍然会报错“read dead end”；")]),t._v(" "),a("li",[t._v("管道流的读取方法与普通流不同，只有输出流正确close时，输出流才能读到-1值")])])]),t._v(" "),a("h2",{attrs:{id:"对象序列化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象序列化"}},[t._v("#")]),t._v(" 对象序列化")]),t._v(" "),a("h3",{attrs:{id:"对象序列化主要用途"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象序列化主要用途"}},[t._v("#")]),t._v(" 对象序列化主要用途：")]),t._v(" "),a("ul",[a("li",[t._v("将对象的字节序列永久的保存在磁盘文件中。")]),t._v(" "),a("li",[t._v("通过网络来传送对象的字节序列。")])]),t._v(" "),a("p",[t._v("序列化：将一个对象实例转换成字节序列")]),t._v(" "),a("p",[t._v("实现Externalizable接口使我们能够更好地控制从流中读取和写入对象。它继承Serializable接口。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Externalizable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readExternal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectInput")]),t._v(" in"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassNotFoundException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeExternal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectOutput")]),t._v(" out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"阅读器与写入器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阅读器与写入器"}},[t._v("#")]),t._v(" 阅读器与写入器")]),t._v(" "),a("h2",{attrs:{id:"内存流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存流"}},[t._v("#")]),t._v(" 内存流")]),t._v(" "),a("p",[t._v("ByteArrayOutputStream：字节数组输出流在内存中创建一个字节数组缓冲区，所有发送到输出流的数据保存在该字节数组缓冲区中。实际作用就是通过write()将对象各个字段写入一个字节数组，然后在使用toByteArray()将字节数据取出来，通过tcp传输给服务器。")]),t._v(" "),a("p",[t._v("ByteArrayInputStream：字节数组输入流在内存中创建一个字节数组缓冲区，从输入流读取的数据保存在该字节数组缓冲区中。实际就是将客户端发送过来的消息转成byte数组，存入内存，在分批次读取数据。")]),t._v(" "),a("h2",{attrs:{id:"i-o缓冲区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#i-o缓冲区"}},[t._v("#")]),t._v(" I/O缓冲区")]),t._v(" "),a("h3",{attrs:{id:"什么是nio"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是nio"}},[t._v("#")]),t._v(" 什么是NIO?")]),t._v(" "),a("p",[a("strong",[t._v("通道")]),t._v("：提供双向数据传输，使用通道来读取或写入数据；")]),t._v(" "),a("p",[a("strong",[t._v("缓冲区")]),t._v("：具有确定其可以包含的数据的上限的固定容量；")]),t._v(" "),a("p",[t._v("基于流的I/O中，数据传输的基本单位是字节；基于通道的NIO中，数据传输的基于单位是缓冲区。")]),t._v(" "),a("h3",{attrs:{id:"缓冲区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓冲区"}},[t._v("#")]),t._v(" 缓冲区")]),t._v(" "),a("p",[t._v("所有缓冲区类都继承自一个抽象的Buffer类。不同的缓冲区保存不同数据类型的数据。包含原始值的缓冲区类如下：")]),t._v(" "),a("ul",[a("li",[t._v("ByteBuffer")]),t._v(" "),a("li",[t._v("ShortBuffer")]),t._v(" "),a("li",[t._v("CharBuffer")]),t._v(" "),a("li",[t._v("IntBuffer")]),t._v(" "),a("li",[t._v("LongBuffer")]),t._v(" "),a("li",[t._v("FloatBuffer")]),t._v(" "),a("li",[t._v("DoubleBuffer")])]),t._v(" "),a("h3",{attrs:{id:"缓冲区属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓冲区属性"}},[t._v("#")]),t._v(" 缓冲区属性")]),t._v(" "),a("p",[t._v("以下是缓冲区的四个重要属性。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("mark "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" position "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" limit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" capacity\n")])])]),a("ul",[a("li",[t._v("Capacity：缓冲区容量")]),t._v(" "),a("li",[t._v("Position：当前读取位置")]),t._v(" "),a("li",[t._v("Limit：读取的最大长度")]),t._v(" "),a("li",[t._v("Mark：标记位置，reset时需要")])]),t._v(" "),a("p",[t._v("参考链接：")]),t._v(" "),a("ul",[a("li",[t._v("https://www.jianshu.com/p/e1416f026c3d")]),t._v(" "),a("li",[t._v("https://blog.csdn.net/hewusheng10/article/details/8523924")])])])}),[],!1,null,null,null);a.default=r.exports}}]);